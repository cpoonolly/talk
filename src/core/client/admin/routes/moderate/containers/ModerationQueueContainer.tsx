import { RouteProps } from "found";
import React from "react";
import { graphql, GraphQLTaggedNode } from "react-relay";

import { QueueContainer_queue as QueueData } from "talk-admin/__generated__/QueueContainer_queue.graphql";
import { QueueContainer_settings as SettingsData } from "talk-admin/__generated__/QueueContainer_settings.graphql";
import { QueueContainerPaginationPendingQueryVariables } from "talk-admin/__generated__/QueueContainerPaginationPendingQuery.graphql";
import { withPaginationContainer } from "talk-framework/lib/relay";

import LoadingQueue from "../components/LoadingQueue";
import QueueContainer, { QueueContainerProps } from "./QueueContainer";
import { QueueComments, QueueSettings } from "../components/Queue";

// TODO: (cvle) If this could be autogenerated..
type FragmentVariables = QueueContainerPaginationPendingQueryVariables;

export interface ModerationQueueContainerProps extends QueueContainerProps {
  queue: QueueData;
  settings: SettingsData;
}

export default abstract class ModerationQueueContainer extends QueueContainer<ModerationQueueContainerProps> {

  protected getComments(): QueueComments {
    return this.props.queue.comments.edges.map(edge => edge.node);
  }

  protected getSettings(): QueueSettings {
    return this.props.settings;
  }

  protected static enhanceWithPagination(
    component: React.ComponentType<ModerationQueueContainerProps>,
    paginationQuery: GraphQLTaggedNode
  ): React.ComponentType<any> {
    return withPaginationContainer<
      ModerationQueueContainerProps,
      QueueContainerPaginationPendingQueryVariables,
      FragmentVariables
    >(
      {
        queue: graphql`
          fragment QueueContainer_queue on ModerationQueue
            @argumentDefinitions(
              count: { type: "Int!", defaultValue: 5 }
              cursor: { type: "Cursor" }
            ) {
            count
            comments(first: $count, after: $cursor)
              @connection(key: "Queue_comments") {
              edges {
                node {
                  id
                  ...ModerateCardContainer_comment
                }
              }
            }
          }
        `,
        settings: graphql`
          fragment QueueContainer_settings on Settings {
            ...ModerateCardContainer_settings
          }
        `,
      },
      {
        direction: "forward",
        getConnectionFromProps(props) {
          return props.queue && props.queue.comments;
        },
        // This is also the default implementation of `getFragmentVariables` if it isn't provided.
        getFragmentVariables(prevVars, totalCount) {
          return {
            ...prevVars,
            count: totalCount,
          };
        },
        getVariables(props, { count, cursor }, fragmentVariables) {
          return {
            count,
            cursor,
          };
        },
        query: paginationQuery,
      }
    )(component);
  }

  protected static createRouteConfig(
    component: React.ComponentType<ModerationQueueContainerProps>,
    queueQuery: GraphQLTaggedNode,
  ): RouteProps {
    return {
      Component: component,
      query: queueQuery,
      cacheConfig: { force: true },
      render: ({ Component, props }) => {
        const anyProps = props as any;
        if (Component && props) {
          const queue =
            anyProps.moderationQueues[Object.keys(anyProps.moderationQueues)[0]];
          return <Component queue={queue} settings={anyProps.settings} />;
        }
        return <LoadingQueue />;
      },
    };
  }
}