import { RouteProps } from "found";
import React from "react";
import { graphql } from "react-relay";

import { RejectedQueueContainer_query as QueryData } from "talk-admin/__generated__/RejectedQueueContainer_query.graphql";
import { RejectedQueueContainerPaginationQueryVariables } from "talk-admin/__generated__/RejectedQueueContainerPaginationQuery.graphql";
import { withPaginationContainer } from "talk-framework/lib/relay";

import LoadingQueue from "../components/LoadingQueue";
import QueueContainer, { QueueContainerProps } from "./QueueContainer";
import { QueueComments, QueueSettings } from "../components/Queue";

interface RejectedQueueContainerProps extends QueueContainerProps {
  query: QueryData;
}

// TODO: (cvle) If this could be autogenerated..
type FragmentVariables = RejectedQueueContainerPaginationQueryVariables;

export default class RejectedQueueContainer extends QueueContainer<RejectedQueueContainerProps> {
  public static routeConfig = RejectedQueueContainer.createRouteConfig();

  protected danglingLogic = (status: string) => ["ACCEPTED"].indexOf(status) >= 0;

  protected getComments(): QueueComments {
    return this.props.query.comments.edges.map(edge => edge.node);
  }

  protected getSettings(): QueueSettings {
    return this.props.query.settings;
  }

  protected getEmptyQueueMessage(): string {
    return "There are no rejected comments.";
  }

  private static enhanceWithPagination(): React.ComponentType<any> {
    return withPaginationContainer<
      RejectedQueueContainerProps,
      RejectedQueueContainerPaginationQueryVariables,
      FragmentVariables
    >(
      {
        query: graphql`
          fragment RejectedQueueContainer_query on Query
            @argumentDefinitions(
              count: { type: "Int!", defaultValue: 5 }
              cursor: { type: "Cursor" }
            ) {
            comments(status: REJECTED, first: $count, after: $cursor)
              @connection(key: "RejectedQueue_comments") {
              edges {
                node {
                  id
                  ...ModerateCardContainer_comment
                }
              }
            }
            settings {
              ...ModerateCardContainer_settings
            }
          }
        `,
      },
      {
        direction: "forward",
        getConnectionFromProps(props) {
          return props.query && props.query.comments;
        },
        // This is also the default implementation of `getFragmentVariables` if it isn't provided.
        getFragmentVariables(prevVars, totalCount) {
          return {
            ...prevVars,
            count: totalCount,
          };
        },
        getVariables(props, { count, cursor }, fragmentVariables) {
          return {
            count,
            cursor,
          };
        },
        query: graphql`
          # Pagination query to be fetched upon calling 'loadMore'.
          # Notice that we re-use our fragment, and the shape of this query matches our fragment spec.
          query RejectedQueueContainerPaginationQuery(
            $count: Int!
            $cursor: Cursor
          ) {
            ...RejectedQueueContainer_query
              @arguments(count: $count, cursor: $cursor)
          }
        `,
      }
    )(RejectedQueueContainer);
  }

  private static createRouteConfig(): RouteProps {
    return {
      Component: RejectedQueueContainer.enhanceWithPagination(),
      query: graphql`
        query RejectedQueueContainerQuery {
          ...RejectedQueueContainer_query
        }
      `,
      cacheConfig: { force: true },
      render: ({ Component, props }) => {
        if (Component && props) {
          return <Component query={props} />;
        }
        return <LoadingQueue />;
      },
    };
  }
}
